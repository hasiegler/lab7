dist <- dist(data)
min(dist, na.rm = TRUE)
dist <- dist(iris3)
dist
min(dist)
dist
dist <- dist %>% as.data.frame()
dist <- dist %>% as.matrix() %>% as.data.frame()
View(dist)
dist[dist == 0] <- NA
View(dist)
iris3 <- iris %>%
select(-Species)
iris3 <- iris3[50:100]
iris3 <- iris3[50:100,]
generalize <- function(dat, k){
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist <- dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
return(res)
result <- cutree(res, k)
return(result)
}
generalize(iris3, k)
View(dist)
dist <- as.matrix(dist)
View(dist)
min(dist, na.rm = TRUE)
which(as.matrix(dist) == min(dist, na.rm = TRUE)
which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)
which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)
which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
generalize(iris2, 2)
for (i in 1:(nrow(data) - 1)){
print(i)}
generalize <- function(dat, k){
browser()
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist <- dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
return(res)
result <- cutree(res, k)
return(result)
}
generalize(iris2, 2)
iris2 <- iris %>%
select(-Species)
iris2 <- iris2[30:35,]
merges <- data.frame(one = as.numeric(),
two = as.numeric())
dist <- dist(iris2)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist <- dist[dist == 0] <- NA
dist <- dist(iris2)
dist %>%
as.matrix() %>% as.data.frame()
dist <- dist %>% as.matrix() %>% as.data.frame()
View(dist)
dist[dist == 0] <- NA
View(dist)
which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)
which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
generalize(iris2, 2)
generalize <- function(dat, k){
browser()
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist <- dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
return(res)
result <- cutree(res, k)
return(result)
}
generalize(iris2, 2)
dist <- dist(iris2)
View(iris2)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist <- dist[dist == 0] <- NA
dist <- dist(iris2)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
View(dist)
dist[dist == 0] <- NA
View(dist)
generalize <- function(dat, k){
browser()
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
return(res)
result <- cutree(res, k)
return(result)
}
generalize(iris2, 2)
generalize <- function(dat, k){
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
return(res)
result <- cutree(res, k)
return(result)
}
generalize(iris2, 2)
generalize <- function(dat, k){
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
result <- cutree(res, k)
return(result)
}
generalize(iris2, 2)
iris3 <- iris %>% select(-Species)
iris3 <- iris3[50:100,]
generalize(iris3, 3)
res <- iris3 %>% dist() %>% hclust()
cutree(res, 3)
generalize <- function(dat, k){
merges <- data.frame(one = as.numeric(),
two = as.numeric())
data <- dat
for (i in 1:(nrow(data) - 1)){
dist <- dist(data)
dist <- dist %>%
as.matrix() %>%
as.data.frame()
dist[dist == 0] <- NA
closest <- which(as.matrix(dist) == min(dist, na.rm = TRUE), arr.ind = TRUE)[1,]
merges[i,] <- c(-closest[2], -closest[1])
recent <- data[c(closest[1], closest[2]),] %>%
summarize_all(mean)
data[closest[1],] <- recent
data[closest[2],] <- NA
}
finished <- data.frame(one = as.numeric(),
two = as.numeric())
finished[1,] <- merges[1,]
for (i in 2:(nrow(data) - 1)) {
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]){
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
} else {
finished[i,2] <- merges[i,2]
}
} else if (merges$two[i] %in% merges$one[1:i-1] | merges$two[i] %in% merges$two[1:i-1]) {
rows <- which(merges$two[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$two[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,2] <- rows
if (merges$one[i] %in% merges$one[1:i-1] | merges$one[i] %in% merges$two[1:i-1]){
rows <- which(merges$one[i] == merges$one[1:i-1])
rows <- c(rows, which(merges$one[i] == merges$two[1:i-1]))
rows <- max(rows)
finished[i,1] <- rows
} else {
finished[i,1] <- merges[i,1]
}
} else {
finished[i,] <- merges[i,]
}
}
res <- list()
res$merge <- finished %>%
as.matrix()
result <- cutree(res, k)
return(result)
}
generalize(mtcars, 4)
library(tidyverse)
generalize(mtcars, 4)
res <- mtcars %>% dist() %>% hlclust()
res <- mtcars %>% dist() %>% hclust()
cutree(res, 4)
generalize(iris, 3)
res <- iris %>% dist() %>% hclust()
cutree(res, 3)
library(clust431)
hier_clust(iris, 3)
iris2 <- iris %>% select(-Species)
iris2 <- iris2[20:50,]
hier_clust(iris2, 4)
hier_clust(iris2, 3)
res <- iris2 %>% dist() %>% hclust()
cutree(res, 3)
res <- iris2 %>% dist() %>% hclust(method = "centroid")
cutree(res, 3)
test1 <- cutree(res, 3)
test2 <- hier_clust(iris2, 3)
test1-test2
hier_clust(mtcars, 5)
hier_clust(mtcars, 3)
res <- mtcars %>% dist() %>% hclust(method = "centroid")
plot(res)
plot(res)
mtcars
library(clust431)
library(clust431)
hier_clust(iris2, 3)
hier]
hier_clust(mtcars, 2)
res <- mtcars %>% dist() %>% hclust()
cutree(res, 2)
